
schemaVersion: "2.0.0"

# Verify metadata of the docker file

metadataTest:
  envVars:
   - key: CATALINA_HOME
     value: /usr/local/tomcat
   - key: PATH
     value: /usr/local/tomcat/bin:/opt/java/openjdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
   - key: JDBC_MAX_ACTIVE
     value: 75
   - key: JDBC_MIN_IDLE
     value: 3
   - key: JDBC_MAX_IDLE
     value: 25
   - key: JDBC_MAX_WAIT
     value: 10000
   - key: JDBC_INITIAL_SIZE
     value: 0
   - key: JDBC_CONNECTION_PROPERTIES
     value:
   - key: JDBC_TIME_BETWEEN_EVICTIONS
     value: 30000
   - key: JDBC_MIN_EVICTABLE_IDLE_TIME
     value: 60000
   - key: ENABLE_CUSTOM_ARTIFACTORY_SSL_VERIFICATION
     value: false
  exposedPorts: ["8080", "9001", "47100", "7003"]
  # Add 5701-5710 ports                      
  entrypoint: [/scripts/docker-entrypoint.sh]
  cmd: ["run"] 

# Verify all directories/files/folders to be present

fileExistenceTests:
- name: 'Root'
  path: '/'
  shouldExist: true
  isExecutableBy: 'group'

- name: 'tomcat path'
  path: '/usr/local/tomcat/'
  shouldExist: true
  permissions: 'drwxr-xr-x'
  uid: 9001
  gid: 0

- name: 'Incorrect path'
  path: '/usr/local/tomcat/test'
  shouldExist: false
  permissions: 'dgrwxr-xr-x'

- name: 'catalina file path'
  path: '/usr/local/tomcat/bin/catalina.sh'
  shouldExist: true
  permissions: '-rwxrwxr-x'
  uid: 9001
  gid: 0

- name: 'Heap Dumps File Path'
  path: '/heapdumps'
  shouldExist: true
  permissions: 'drwxrwx---'
  uid: 9001
  gid: 0

- name: 'Diagnostic Files Path'
  path: '/diagnosticfiles'
  shouldExist: true
  permissions: 'drwxrwx---'
  uid: 9001
  gid: 0

- name: 'opt/pega File Path'
  path: '/opt/pega'
  shouldExist: true
  permissions: 'drwxrwxr-x'
  uid: 9001
  gid: 0

- name: 'Filerepo File Path'
  path: '/opt/pega/filerepo'
  shouldExist: true
  permissions: 'drwxrwxr-x'
  uid: 9001
  gid: 0

- name: 'Config File Path'
  path: '/opt/pega/config'
  shouldExist: true
  permissions: 'drwxrwxr-x'
  uid: 9001
  gid: 0

- name: 'Kerberos File Path'
  path: '/opt/pega/kerberos'
  shouldExist: true
  permissions: 'drwxrwxr-x'
  uid: 9001
  gid: 0

- name: 'LIB File Path'
  path: '/opt/pega/lib'
  shouldExist: true
  permissions: 'drwxrwxr-x'
  uid: 9001
  gid: 0

- name: 'Certs File Path'
  path: '/opt/pega/certs'
  shouldExist: true
  permissions: 'drwxrwxr-x'
  uid: 9001
  gid: 0

- name: 'Permission for java /lib/security folder'
  path: '$JAVA_HOME/lib/security'
  shouldExist: true
  permissions: 'drwxrwxr-x'
  uid: 9001
  gid: 0

- name: 'TLS Certs File Path'
  path: '/opt/pega/tomcatcertsmount'
  shouldExist: true
  permissions: 'drwxrwxr-x'
  uid: 9001
  gid: 0

- name: 'prometheus lib path'
  path: '/opt/pega/prometheus'
  shouldExist: true
  permissions: 'drwxrwxr-x'
  uid: 9001
  gid: 0

- name: 'prometheus lib file'
  path: '/opt/pega/prometheus/jmx_prometheus_javaagent.jar'
  shouldExist: true
  permissions: '-r--r-----'
  uid: 9001
  gid: 0


- name: 'prweb deployment path'
  path: '/opt/pega/prweb'
  shouldExist: true
  permissions: 'drwxrwxr-x'
  uid: 9001
  gid: 0

- name: 'Secrets File Path'
  path: '/opt/pega/secrets'
  shouldExist: true
  permissions: 'drwxrwxr-x'
  uid: 9001
  gid: 0

- name: 'StreamVolume File Path'
  path: '/opt/pega/streamvol'
  shouldExist: true
  permissions: 'drwxrwxr-x'
  uid: 9001
  gid: 0

- name: 'Kafka File Path'
  path: '/opt/pega/kafkadata'
  shouldExist: true
  permissions: 'drwxrwxr-x'
  uid: 9001
  gid: 0

- name: 'Custom artifactory Certs File Path'
  path: '/opt/pega/artifactory/cert'
  shouldExist: true
  permissions: 'drwxrwxr-x'
  uid: 9001
  gid: 0

- name: 'Decompressed Config File Path'
  path: '/opt/pega/decompressedconfig'
  shouldExist: true
  permissions: 'drwxrwxr-x'
  uid: 9001
  gid: 0
  
 # Simulate the functional use case for testing

commandTests:
# Check with the default tomcat catalina  
  - name: "catalina check"
    command: "bash"
    args:
    - -c
    - |
        rm -f /usr/local/tomcat/conf/Catalina/localhost/prweb.xml &&
        bash -c '/usr/local/tomcat/bin/catalina.sh run &'&&
        sleep 15s &&
        curl --write-out "%{http_code}\n" --silent --output /dev/null "localhost:8080"
    exitCode: 0
    expectedOutput: ["200"]
# Verify Java install    
  - name: "Java version check"
    command: "which"
    args: ["java"]
    expectedOutput: ["/opt/java/openjdk/bin/java"]
#Verify JAVA_HOME environment variable    
  - name: "JAVA_HOME check"
    command: "echo"
    args: ["$JAVA_HOME"]
    expectedOutput: ["/opt/java/openjdk"]
# Verify Java Version    
  - name: "JAVA VERSION check"
    command: "bash"
    args:
    - -c
    - |
        java -version  2>&1 | grep -E "OpenJDK 64-Bit Server VM (AdoptOpenJDK|Temurin)"
    expectedOutput: [".*OpenJDK 64-Bit Server VM (AdoptOpenJDK|Temurin).*"] 
# Verify Cataline_home variable       
  - name: "Catalina Home check"
    command: "echo"
    args: ["$CATALINA_HOME"]
    expectedOutput: ["/usr/local/tomcat"]
# Verify Nodetype initialization    
  - name: "NodeType initialization check"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"      
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["WebUser,BackgroundProcessing,Search,Stream"]
# Verify NodeType as Foreground    
  - name: "Foreground NodeType check"
    envVars:
    - key: "NODE_TYPE"
      value: "Foreground"
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"      
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        bash -c './scripts/docker-entrypoint.sh run'      
    expectedOutput: ["WebUser"]
# Verify NodeType as Background     
  - name: "Background NodeType check"
    envVars:
    - key: "NODE_TYPE"
      value: "Background"
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"       
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        bash -c './scripts/docker-entrypoint.sh run'      
    expectedOutput: ["BackgroundProcessing,Search,Batch,RealTime,Custom1,Custom2,Custom3,Custom4,Custom5,BIX"]
# Verify NodeType as Stream      
  - name: "Stream NodeType check"
    envVars:
    - key: "NODE_TYPE"
      value: "Stream"
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"      
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        bash -c './scripts/docker-entrypoint.sh run'       
    expectedOutput: ["Stream"] 
# Verify empty JDBC_URL         
  - name: "JDBC_URL check"     
    command: "bash"
    args:
    - -c
    - |
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 1       
    expectedOutput: ["JDBC_URL must be specified"]
# Verify empty JDBC_CLASS     
  - name: "JDBC_CLASS check"     
    envVars:      
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"      
    command: "bash"
    args:
    - -c
    - |
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 1       
    expectedOutput: ["JDBC_CLASS must be specified"]
# Verify JDBC_DRIVER_URI download with secure connection
  - name: "JDBC_DRIVER_URI Download check"
    envVars:
      - key: "JDBC_DRIVER_URI"
        value: "https://jdbc.postgresql.org/download/postgresql-42.2.0.jar"
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "ENABLE_CUSTOM_ARTIFACTORY_SSL_VERIFICATION"
        value: true
    command: "bash"
    args:
      - -c
      - |
        bash -c './scripts/docker-entrypoint.sh'
    expectedOutput: ["Establishing a secure connection to download driver."]
# Verify JDBC_DRIVER_URI download with an insecure connection
  - name: "JDBC_DRIVER_URI Download check"
    envVars:
      - key: "JDBC_DRIVER_URI"
        value: "https://jdbc.postgresql.org/download/postgresql-42.2.0.jar"
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
    command: "bash"
    args:
      - -c
      - |
        bash -c './scripts/docker-entrypoint.sh'
    expectedOutput: ["Establishing an insecure connection to download driver."]
# Verify JDBC_DRIVER_URI download
  - name: "JDBC_DRIVER_URI Download check"
    envVars:
    - key: "JDBC_DRIVER_URI"
      value: "https://jdbc.postgresql.org/download/postgresql-42.2.0.jar"
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"          
    command: "bash"
    args:
    - -c
    - |
        bash -c './scripts/docker-entrypoint.sh'       
    expectedOutput: ["Downloading database driver:"]
# Verify JDBC_DRIVER_URI download for failure case   
  - name: "JDBC_DRIVER_URI Download Failure check"
    envVars:
    - key: "JDBC_DRIVER_URI"
      value: "https://jdbc.postgresql.org/downloadd/postgressql-42.2.0.jar"
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"          
    command: "bash"
    args:
    - -c
    - |
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 1    
    expectedOutput: ["Could not download jar from "]
# Verify Downloaded jar in opt/pega/lib   
  - name: "JDBC_DRIVER jar check in opt/pega/lib"
    envVars:
    - key: "JDBC_DRIVER_URI"
      value: "https://jdbc.postgresql.org/download/postgresql-42.2.0.jar"
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"          
    command: "bash"
    args:
    - -c
    - |
        bash -c './scripts/docker-entrypoint.sh' &&
        [ -f /opt/pega/lib/postgresql-42.2.0.jar ]    
    exitCode: 0    
# Verify Downloaded jar in tomcat lib   
  - name: "JDBC_DRIVER jar check in Tomcat lib"
    envVars:
    - key: "JDBC_DRIVER_URI"
      value: "https://jdbc.postgresql.org/download/postgresql-42.2.0.jar"
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"          
    command: "bash"
    args:
    - -c
    - |
        bash -c './scripts/docker-entrypoint.sh' &&
        [ -f /usr/local/tomcat/lib/postgresql-42.2.0.jar ]    
    exitCode: 0 

# Verify Empty Value for Index_Directory   
  - name: "INDEX_DIRECTORY empty check"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"
    - key: "INDEX_DIRECTORY"
      value: "NONE"

    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        bash -c './scripts/docker-entrypoint.sh run'
    expectedOutput: ["Index Directory Value - "]

# Unsupported Node Type check   
  - name: "INDEX_DIRECTORY empty check"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"
    - key: "NODE_TYPE"
      value: "DDS, Universal"

    command: "bash"
    args:
    - -c
    - |
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 1
    expectedOutput: ["IS NOT SUPPORTED BY THIS IMAGE."]

# Stream Node Check   
  - name: "Stream Node Check"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"
    - key: "NODE_TYPE"
      value: "Stream"

    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&    
        bash -c './scripts/docker-entrypoint.sh run'
    expectedOutput: ["IsStreamNode - true"]    

# Search Index Directory Check   
  - name: "Search Index Directory Check"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"
    - key: "NODE_TYPE"
      value: "Search"

    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&    
        bash -c './scripts/docker-entrypoint.sh run'
    expectedOutput: ["Index Directory for Search - /search_index"]

  # Artifactory basic authentication Username as file input
  - name: "Artifactory basic authentication Username as file input"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "CUSTOM_ARTIFACTORY_PASSWORD"
      value: "artifactory_basic_auth_password"
    - key: "DB_USERNAME"
      value: "db_user"
    command: "bash"
    args:
    - -c
    - |
      mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
      mv tests/test-artifacts/CUSTOM_ARTIFACTORY_USERNAME /opt/pega/secrets/CUSTOM_ARTIFACTORY_USERNAME &&
      bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Artifactory basic authentication Username is - artifactory_basic_auth_username_from_file"]

  # Artifactory basic authentication only Username provided
  - name: "Artifactory basic authentication only Username provided"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "db_user"
    command: "bash"
    args:
    - -c
    - |
      mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
      mv tests/test-artifacts/CUSTOM_ARTIFACTORY_USERNAME /opt/pega/secrets/CUSTOM_ARTIFACTORY_USERNAME &&
      bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 1
    expectedOutput: ["SECRET_CUSTOM_ARTIFACTORY_USERNAME & SECRET_CUSTOM_ARTIFACTORY_PASSWORD must be specified for basic authentication for custom artifactory."]

  # Artifactory basic authentication Password as file input
  - name: "Artifactory basic authentication Password as file input"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "db_user"
    - key: "CUSTOM_ARTIFACTORY_USERNAME"
      value: "artifactory_basic_user"
    command: "bash"
    args:
    - -c
    - |
      mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
      mv tests/test-artifacts/CUSTOM_ARTIFACTORY_PASSWORD /opt/pega/secrets/CUSTOM_ARTIFACTORY_PASSWORD &&
      bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Artifactory basic authentication Password is - artifactory_basic_auth_password_from_file"]

  # Artifactory basic authentication only Password provided
  - name: "Artifactory basic authentication only Password provided"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "db_user"
    command: "bash"
    args:
    - -c
    - |
      mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
      mv tests/test-artifacts/CUSTOM_ARTIFACTORY_PASSWORD /opt/pega/secrets/CUSTOM_ARTIFACTORY_PASSWORD &&
      bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 1
    expectedOutput: ["SECRET_CUSTOM_ARTIFACTORY_USERNAME & SECRET_CUSTOM_ARTIFACTORY_PASSWORD must be specified for basic authentication for custom artifactory."]

  # Artifactory APIKey authentication header as file input
  - name: "Artifactory APIKey authentication header as file input"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "db_user"
    - key: "CUSTOM_ARTIFACTORY_APIKEY"
      value: "artifactory_apikey"
    command: "bash"
    args:
    - -c
    - |
      mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
      mv tests/test-artifacts/CUSTOM_ARTIFACTORY_APIKEY_HEADER /opt/pega/secrets/CUSTOM_ARTIFACTORY_APIKEY_HEADER &&
      bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Artifactory apikey authentication header is - artifactory_apikey_auth_header_from_file"]

  # Artifactory APIKey authentication only header provided
  - name: "Artifactory APIKey authentication only header provided"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "db_user"
    command: "bash"
    args:
    - -c
    - |
      mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
      mv tests/test-artifacts/CUSTOM_ARTIFACTORY_APIKEY_HEADER /opt/pega/secrets/CUSTOM_ARTIFACTORY_APIKEY_HEADER &&
      bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 1
    expectedOutput: ["SECRET_CUSTOM_ARTIFACTORY_APIKEY_HEADER & SECRET_CUSTOM_ARTIFACTORY_APIKEY must be specified for authentication using api key for custom artifactory."]

  # Artifactory APIKey authentication apikey as file input
  - name: "Artifactory APIKey authentication apikey as file input"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "db_user"
    - key: "CUSTOM_ARTIFACTORY_APIKEY_HEADER"
      value: "test_user"
    command: "bash"
    args:
    - -c
    - |
      mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
      mv tests/test-artifacts/CUSTOM_ARTIFACTORY_APIKEY /opt/pega/secrets/CUSTOM_ARTIFACTORY_APIKEY &&
      bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Artifactory apikey authentication apikey value is  - artifactory_apikey_auth_value_from_file"]

  # Artifactory APIKey authentication only apikey provided
  - name: "Artifactory APIKey authentication only apikey provided"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "db_user"
    command: "bash"
    args:
    - -c
    - |
      mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
      mv tests/test-artifacts/CUSTOM_ARTIFACTORY_APIKEY /opt/pega/secrets/CUSTOM_ARTIFACTORY_APIKEY &&
      bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 1
    expectedOutput: ["SECRET_CUSTOM_ARTIFACTORY_APIKEY_HEADER & SECRET_CUSTOM_ARTIFACTORY_APIKEY must be specified for authentication using api key for custom artifactory."]

# Cassandra Username as file input
  - name: "Cassandra Username as file input"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres_user"
    - key: "DB_PASSWORD"
      value: "postgres_pass"      
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        mv tests/test-artifacts/CASSANDRA_USERNAME /opt/pega/secrets/CASSANDRA_USERNAME &&
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Cassandra Username is - cassandra_username_from_file"]

# Cassandra Password as file input   
  - name: "Cassandra Password as file input"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres_user"
    - key: "DB_PASSWORD"
      value: "postgres_pass"      
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&    
        mv tests/test-artifacts/CASSANDRA_PASSWORD /opt/pega/secrets/CASSANDRA_PASSWORD &&
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Cassandra Password is - cassandra_password_from_file"] 

# Cassandra Password with spaces as file input
  - name: "Cassandra Password as file input"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres_user"
      - key: "DB_PASSWORD"
        value: "postgres_pass"
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&    
        mv tests/test-artifacts/CASSANDRA_PASSWORD_WITH_SPACES /opt/pega/secrets/CASSANDRA_PASSWORD &&
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Cassandra Password is - cassandra password from file with spaces"]

  # Database Username as file input
  - name: "Database Username as file input"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_PASSWORD"
      value: "postgres_pass"      
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&    
        mv tests/test-artifacts/DB_USERNAME /opt/pega/secrets/DB_USERNAME &&
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Database Username is - db_username_from_file"]

# Database Password as file input   
  - name: "Database Password as file input"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres_user"      
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&    
        mv tests/test-artifacts/DB_PASSWORD /opt/pega/secrets/DB_PASSWORD &&
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Database Password is - db_password_from_file"]

  # Artifactory basic authentication Username as Environment Variable
  - name: "Artifactory basic authentication Username as Environment Variable"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres_user"
      - key: "DB_PASSWORD"
        value: "postgres_pass"
      - key: "CASSANDRA_USERNAME"
        value: "cassandra_username"
      - key: "CUSTOM_ARTIFACTORY_USERNAME"
        value: "artifactory_basic_user"
      - key: "CUSTOM_ARTIFACTORY_PASSWORD"
        value: "artifactory_basic_auth_password"
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Artifactory basic authentication Username is - artifactory_basic_user"]

  # Artifactory basic authentication Password as Environment Variable
  - name: "Artifactory basic authentication Password as Environment Variable"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres_user"
      - key: "DB_PASSWORD"
        value: "postgres_pass"
      - key: "CASSANDRA_USERNAME"
        value: "cassandra_username"
      - key: "CUSTOM_ARTIFACTORY_USERNAME"
        value: "artifactory_basic_user"
      - key: "CUSTOM_ARTIFACTORY_PASSWORD"
        value: "artifactory_basic_auth_password"
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Artifactory basic authentication Password is - artifactory_basic_auth_password"]

  # Artifactory APIKey authentication header as Environment Variable
  - name: "Artifactory APIKey authentication header as Environment Variable"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres_user"
      - key: "DB_PASSWORD"
        value: "postgres_pass"
      - key: "CASSANDRA_USERNAME"
        value: "cassandra_username"
      - key: "CUSTOM_ARTIFACTORY_APIKEY_HEADER"
        value: "artifactory_apikey_header"
      - key: "CUSTOM_ARTIFACTORY_APIKEY"
        value: "artifactory_apikey"
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Artifactory apikey authentication header is - artifactory_apikey_header"]

  # Artifactory APIKey authentication apikey as Environment Variable
  - name: "Artifactory APIKey authentication apikey as Environment Variable"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres_user"
      - key: "DB_PASSWORD"
        value: "postgres_pass"
      - key: "CASSANDRA_USERNAME"
        value: "cassandra_username"
      - key: "CUSTOM_ARTIFACTORY_APIKEY_HEADER"
        value: "artifactory_apikey_header"
      - key: "CUSTOM_ARTIFACTORY_APIKEY"
        value: "artifactory_apikey"
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Artifactory apikey authentication apikey value is  - artifactory_apikey"]

# Cassandra Username as Environment Variable
  - name: "Cassandra Username as Environment Variable"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres_user"
    - key: "DB_PASSWORD"
      value: "postgres_pass"      
    - key: "CASSANDRA_USERNAME"
      value: "cassandra_username"
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&    
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Cassandra Username is - cassandra_username"]

# Cassandra Password as Environment Variable   
  - name: "Cassandra Password as file input"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres_user"
    - key: "DB_PASSWORD"
      value: "postgres_pass"      
    - key: "CASSANDRA_PASSWORD"
      value: "cassandra_password"
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&    
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Cassandra Password is - cassandra_password"] 

# Database Username as Environment variable   
  - name: "Database Username as Environment variable"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres_user"
    - key: "DB_PASSWORD"
      value: "postgres_pass"      
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&    
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Database Username is - postgres_user"]

# Database Password as Environment variable   
  - name: "Database Password as Environment variable"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres_user"      
    - key: "DB_PASSWORD"
      value: "postgres_pass"      
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&    
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Database Password is - postgres_pass"]
   
# Pega Diagnostic User as Environment variable   
  - name: "Pega Diagnostic User as Environment variable"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"                 
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Pega Diagnostic User is - tomcat_user"]

# Pega Diagnostic Password as Environment variable   
  - name: "Pega Diagnostic Password as Environment variable"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver" 
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"                
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        bash -c '/scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Pega Diagnostic Password is - tomcat_pass"] 

# Pega Diagnostic User as File   
  - name: "Pega Diagnostic Username as File"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"     
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        mv /tests/test-artifacts/PEGA_DIAGNOSTIC_USER /opt/pega/secrets/PEGA_DIAGNOSTIC_USER &&
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Pega Diagnostic User is - tomcat_user_file"]

# Pega Diagnostic Password as File   
  - name: "Pega Diagnostic Password as File "
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver" 
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"                
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        mv /tests/test-artifacts/PEGA_DIAGNOSTIC_PASSWORD /opt/pega/secrets/PEGA_DIAGNOSTIC_PASSWORD &&
        bash -c '/scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Pega Diagnostic Password is - tomcat_pass_file"]      
# Dockerize context xml   
  - name: "Dockerize context.xml tmpl file"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"
    - key: "RULES_SCHEMA"
      value: "rules"
    - key: "DATA_SCHEMA"
      value: "data"          
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/templates/context.xml.tmpl /opt/pega/config/context.xml.tmpl &&
        bash -c './scripts/docker-entrypoint.sh' &&
        diff /usr/local/tomcat/conf/context.xml /tests/test-artifacts/templates/expected_context.xml || echo "context.xml is not properly dockerized"
    exitCode: 0
    excludedOutput: ["context.xml is not properly dockerized"]

# Dockerize context xml (Negative test case)
  - name: "Dockerize context.xml tmpl file"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "dummy"
    - key: "DB_PASSWORD"
      value: "dummy"
    - key: "RULES_SCHEMA"
      value: "rules_negative"
    - key: "DATA_SCHEMA"
      value: "data_negative"
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/templates/context.xml.tmpl /opt/pega/config/context.xml.tmpl &&
        bash -c './scripts/docker-entrypoint.sh' &&
        diff /usr/local/tomcat/conf/context.xml /tests/test-artifacts/templates/expected_context.xml || echo "context.xml is not properly dockerized"
    exitCode: 0
    expectedOutput: ["context.xml is not properly dockerized"]

# Dockerize tomcat users xml   
  - name: "Dockerize tomcat users tmpl file"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"
    - key: "RULES_SCHEMA"
      value: "rules"
    - key: "DATA_SCHEMA"
      value: "data"          
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/templates/tomcat-users.xml.tmpl /opt/pega/config/tomcat-users.xml.tmpl 
        bash -c './scripts/docker-entrypoint.sh' &&
        diff /usr/local/tomcat/conf/tomcat-users.xml /tests/test-artifacts/templates/expected_tomcat-users.xml || echo "tomcat-users.xml is not properly dockerized"
    exitCode: 0
    excludedOutput: ["tomcat-users.xml is not properly dockerized"]

# Dockerize prweb.xml check
  - name: "Dockerize PRWEB Check"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"
    - key: "PEGA_SEARCH_TYPE"
      value: "external"
    - key: "PEGA_SEARCH_URL"
      value: "http://pega-search"
    - key: "PEGA_STREAM_URL"
      value: "http://pega-stream" 
    - key: "CASSANDRA_CLUSTER"
      value: "true"
    - key: "HZ_CLIENT_MODE"
      value: "true"
    - key: "HZ_CS_AUTH_USERNAME"
      value: "hzusername"
    - key: "HZ_CS_AUTH_PASSWORD"
      value: "hzpassword"
    - key: "CASSANDRA_CLIENT_ENCRYPTION"
      value: "true"
    - key: "CASSANDRA_CLIENT_ENCRYPTION_STORE_TYPE"
      value: "JKS"
    - key: "CASSANDRA_TRUSTSTORE"
      value: "/fake/path"
    - key: "CASSANDRA_ASYNC_PROCESSING_ENABLED"
      value: "true"
    - key: "CASSANDRA_KEYSPACES_PREFIX"
      value: "fake_prefix"
    - key: "CASSANDRA_EXTENDED_TOKEN_AWARE_POLICY"
      value: "true"
    - key: "CASSANDRA_LATENCY_AWARE_POLICY"
      value: "true"
    - key: "CASSANDRA_CUSTOM_RETRY_POLICY"
      value: "true"
    - key: "CASSANDRA_CUSTOM_RETRY_POLICY_ENABLED"
      value: "false"
    - key: "CASSANDRA_CUSTOM_RETRY_POLICY_COUNT"
      value: "2"
    - key: "CASSANDRA_SPECULATIVE_EXECUTION_POLICY"
      value: "true"
    - key: "CASSANDRA_SPECULATIVE_EXECUTION_POLICY_ENABLED"
      value: "false"
    - key: "CASSANDRA_SPECULATIVE_EXECUTION_DELAY"
      value: "50"
    - key: "CASSANDRA_SPECULATIVE_EXECUTION_MAX_EXECUTIONS"
      value: "2"
    - key: "CASSANDRA_CSV_METRICS_ENABLED"
      value: "true"
    - key: "CASSANDRA_LOG_METRICS_ENABLED"
      value: "true"
    - key: "EXTERNAL_STREAM"
      value: "true"
    - key: "SERVICES_STREAM_PROVIDER"
      value: "KafkaService"
    - key: "STREAM_BOOTSTRAP_SERVERS"
      value: "host:9092"
    - key: "STREAM_SECURITY_PROTOCOL"
      value: "PLAIN"
    - key: "STREAM_SASL_MECHANISM"
      value: "PLAIN"
    - key: "STREAM_TRUSTSTORE"
      value: "truststore.jks"
    - key: "STREAM_TRUSTSTORE_TYPE"
      value: "jks"
    - key: "STREAM_KEYSTORE"
      value: "keystore.jks"
    - key: "STREAM_KEYSTORE_TYPE"
      value: "jks"
    - key: "STREAM_TRUSTSTORE_PASSWORD"
      value: "fake password"
    - key: "STREAM_KEYSTORE_PASSWORD"
      value: "fake password"
    - key: "STREAM_JAAS_CONFIG"
      value: "fake config"
    - key: "STREAM_NAME_PATTERN"
      value: "pega-{stream.name}"
    - key: "STREAM_REPLICATION_FACTOR"
      value: "1"
    command: "bash"
    args:
    - -c
    - |
        bash -c './scripts/docker-entrypoint.sh' &&      
        diff /usr/local/tomcat/conf/Catalina/localhost/prweb.xml /tests/test-artifacts/expected_prweb.xml || echo "prweb.xml is not dockerized properly" 
    exitCode: 0
    excludedOutput: ["prweb.xml is not dockerized properly"]

# Dockerize prweb.xml check when SSL is enabled for Hazelcast
  - name: "Dockerize PRWEB Check with HZ SSL"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "PEGA_SEARCH_TYPE"
        value: "external"
      - key: "PEGA_SEARCH_URL"
        value: "http://pega-search"
      - key: "PEGA_STREAM_URL"
        value: "http://pega-stream"
      - key: "CASSANDRA_CLUSTER"
        value: "true"
      - key: "HZ_CLIENT_MODE"
        value: "true"
      - key: "HZ_CS_AUTH_USERNAME"
        value: "hzusername"
      - key: "HZ_CS_AUTH_PASSWORD"
        value: "hzpassword"
      - key: "CASSANDRA_CLIENT_ENCRYPTION"
        value: "true"
      - key: "CASSANDRA_CLIENT_ENCRYPTION_STORE_TYPE"
        value: "JKS"
      - key: "CASSANDRA_TRUSTSTORE"
        value: "/fake/path"
      - key: "CASSANDRA_ASYNC_PROCESSING_ENABLED"
        value: "true"
      - key: "CASSANDRA_KEYSPACES_PREFIX"
        value: "fake_prefix"
      - key: "CASSANDRA_EXTENDED_TOKEN_AWARE_POLICY"
        value: "true"
      - key: "CASSANDRA_LATENCY_AWARE_POLICY"
        value: "true"
      - key: "CASSANDRA_CUSTOM_RETRY_POLICY"
        value: "true"
      - key: "CASSANDRA_CUSTOM_RETRY_POLICY_ENABLED"
        value: "false"
      - key: "CASSANDRA_CUSTOM_RETRY_POLICY_COUNT"
        value: "2"
      - key: "CASSANDRA_SPECULATIVE_EXECUTION_POLICY"
        value: "true"
      - key: "CASSANDRA_SPECULATIVE_EXECUTION_POLICY_ENABLED"
        value: "false"
      - key: "CASSANDRA_SPECULATIVE_EXECUTION_DELAY"
        value: "50"
      - key: "CASSANDRA_SPECULATIVE_EXECUTION_MAX_EXECUTIONS"
        value: "2"
      - key: "CASSANDRA_CSV_METRICS_ENABLED"
        value: "true"
      - key: "CASSANDRA_LOG_METRICS_ENABLED"
        value: "true"
      - key: "EXTERNAL_STREAM"
        value: "true"
      - key: "SERVICES_STREAM_PROVIDER"
        value: "KafkaService"
      - key: "STREAM_BOOTSTRAP_SERVERS"
        value: "host:9092"
      - key: "STREAM_SECURITY_PROTOCOL"
        value: "PLAIN"
      - key: "STREAM_SASL_MECHANISM"
        value: "PLAIN"
      - key: "STREAM_TRUSTSTORE"
        value: "truststore.jks"
      - key: "STREAM_TRUSTSTORE_TYPE"
        value: "jks"
      - key: "STREAM_KEYSTORE"
        value: "keystore.jks"
      - key: "STREAM_KEYSTORE_TYPE"
        value: "jks"
      - key: "STREAM_TRUSTSTORE_PASSWORD"
        value: "fake password"
      - key: "STREAM_KEYSTORE_PASSWORD"
        value: "fake password"
      - key: "STREAM_JAAS_CONFIG"
        value: "fake config"
      - key: "STREAM_NAME_PATTERN"
        value: "pega-{stream.name}"
      - key: "STREAM_REPLICATION_FACTOR"
        value: "1"
      - key: "HZ_SSL_ENABLED"
        value: "true"
      - key: "HZ_SSL_PROTOCOL"
        value: "TLS"
      - key: "HZ_SSL_CUSTOM_CLASS"
        value: "com.pega.hazelcast.v5.nio.ssl.BasicSSLContextFactory"
      - key: "HZ_SSL_KEY_STORE_NAME"
        value: "cluster-keystore.jks"
      - key: "HZ_SSL_KEYSTORE_PASSWORD"
        value: "test"
      - key: "HZ_SSL_ALGO"
        value: "SunX509"
      - key: "HZ_SSL_TRUST_STORE_NAME"
        value: "cluster-truststore.jks"
      - key: "HZ_SSL_TRUSTSTORE_PASSWORD"
        value: "test"
    command: "bash"
    args:
      - -c
      - |
        bash -c './scripts/docker-entrypoint.sh' &&      
        diff /usr/local/tomcat/conf/Catalina/localhost/prweb.xml /tests/test-artifacts/expected_prweb_hz_ssl.xml || echo "prweb.xml is not dockerized properly"
    exitCode: 0
    excludedOutput: ["prweb.xml is not dockerized properly"]

# Dockerize prweb.xml check (Negative test case)
  - name: "Dockerize PRWEB Check"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "dummy"
    - key: "DB_PASSWORD"
      value: "dummy"
    - key: "PEGA_SEARCH_TYPE"
      value: "external"
    - key: "PEGA_SEARCH_URL"
      value: "http://pega-search"
    - key: "PEGA_STREAM_URL"
      value: "http://pega-stream"
    - key: "CASSANDRA_CLUSTER"
      value: "false"
    - key: "HZ_CLIENT_MODE"
      value: "false"
    command: "bash"
    args:
    - -c
    - |
        bash -c './scripts/docker-entrypoint.sh' &&
        diff /usr/local/tomcat/conf/Catalina/localhost/prweb.xml /tests/test-artifacts/expected_prweb_withDefaultStreamProvider.xml || echo "prweb.xml is not dockerized properly"
    exitCode: 0
    expectedOutput: ["prweb.xml is not dockerized properly"]

# Verify the run argument for catalina.sh   
  - name: "Verify run argument for catalina.sh"
    envVars:
    - key: "JDBC_DRIVER_URI"
      value: "https://jdbc.postgresql.org/download/postgresql-42.2.0.jar"
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"               
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        bash -c './scripts/docker-entrypoint.sh run' 
    exitCode: 0
    expectedOutput: ["Starting -- Catalina.sh"]
# Verify test case for mounted context.xml    
  - name: "Mounted context.xml"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"
    - key: "RULES_SCHEMA"
      value: "rules"
    - key: "DATA_SCHEMA"
      value: "data"          
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/context.xml /opt/pega/config/context.xml &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: ["Loading context.xml from /opt/pega/config/context.xml"]
# Verify test case for mounted tomcat-users.xml 
  - name: "Mounted tomcat-users.xml"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"
    - key: "RULES_SCHEMA"
      value: "rules"
    - key: "DATA_SCHEMA"
      value: "data"          
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/tomcat-users.xml /opt/pega/config/tomcat-users.xml &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: ["Loading tomcat-users.xml from /opt/pega/config/tomcat-users.xml"]
    # Verify test case for mounted prconfig.xml
  - name: "Mounted prconfig.xml"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"
    - key: "RULES_SCHEMA"
      value: "rules"
    - key: "DATA_SCHEMA"
      value: "data"
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/prconfig.xml /opt/pega/config/prconfig.xml &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: ["Loading prconfig from /opt/pega/config/prconfig.xml"]
    # Verify test case for mounted prlog4j2.xml
  - name: "Mounted prlog4j2.xml"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"
    - key: "RULES_SCHEMA"
      value: "rules"
    - key: "DATA_SCHEMA"
      value: "data"
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/prlog4j2.xml /opt/pega/config/prlog4j2.xml &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: ["Loading prlog4j2 from /opt/pega/config/prlog4j2.xml"]

    # Verify test case for mounted server.xml
  - name: "Mounted server.xml"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"
    - key: "RULES_SCHEMA"
      value: "rules"
    - key: "DATA_SCHEMA"
      value: "data"
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/server.xml /opt/pega/config/server.xml &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: ["Loading server.xml from /opt/pega/config/server.xml"]

    # Verify test case for mounted web.xml
  - name: "Mounted web.xml"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"
    - key: "RULES_SCHEMA"
      value: "rules"
    - key: "DATA_SCHEMA"
      value: "data"
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/web.xml /opt/pega/config/web.xml &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: ["Loading web.xml from /opt/pega/config/web.xml"]

  # Verify test case for mounted krb5.conf file
  - name: "Mounted krb5.conf"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"
    - key: "RULES_SCHEMA"
      value: "rules"
    - key: "DATA_SCHEMA"
      value: "data"
    command: "bash"
    args:
    - -c
    - |
      mv /tests/test-artifacts/krb5.conf /opt/pega/kerberos/krb5.conf &&
      rm -f /usr/local/tomcat/conf/Catalina/localhost/prweb.xml &&
      bash -c '/usr/local/tomcat/bin/catalina.sh run &'&&
      sleep 5s
    exitCode: 0
    expectedOutput: [ "-Djava.security.krb5.conf=/opt/pega/kerberos/krb5.conf" ]

  # Hazelcast Username as file input
  - name: "Hazelcast Username as file input"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres_user"
    - key: "DB_PASSWORD"
      value: "postgres_pass"
    command: "bash"
    args:
     - -c
     - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        mv tests/test-artifacts/HZ_CS_AUTH_USERNAME /opt/pega/secrets/HZ_CS_AUTH_USERNAME &&
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Hazelcast Username is - hazelcast_username_from_file"]

  # Hazelcast Password as file input
  - name: "Hazelcast Password as file input"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres_user"
    - key: "DB_PASSWORD"
      value: "postgres_pass"
    command: "bash"
    args:
    - -c
    - |
      mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
      mv tests/test-artifacts/HZ_CS_AUTH_PASSWORD /opt/pega/secrets/HZ_CS_AUTH_PASSWORD &&
      bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Hazelcast Password is - hazelcast_password_from_file"]

  # Hazelcast Username as Environment Variable
  - name: "Hazelcast Username as Environment Variable"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres_user"
    - key: "DB_PASSWORD"
      value: "postgres_pass"
    - key: "HZ_CS_AUTH_USERNAME"
      value: "hz_cs_auth_username"
    command: "bash"
    args:
    - -c
    - |
      mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
      bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Hazelcast Username is - hz_cs_auth_username"]

  # Hazelcast Password as Environment Variable
  - name: "Hazelcast Password as Environment Variable"
    envVars:
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres_user"
    - key: "DB_PASSWORD"
      value: "postgres_pass"
    - key: "HZ_CS_AUTH_PASSWORD"
      value: "hz_cs_auth_password"
    command: "bash"
    args:
    - -c
    - |
      mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
      bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Hazelcast Password is - hz_cs_auth_password"]
  # Verify empty DB_USERNAME
  - name: "Empty DB_USERNAME check fails"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
    command: "bash"
    args:
      - -c
      - |
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: ["No DB_USERNAME specified; trying alternative, passwordless authentication."]
  # Verify empty DB_PASSWORD as DB_PASSWORD is no longer mandatory with AWS Secrets
  - name: "Empty DB_PASSWORD check passes"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
    command: "bash"
    args:
      - -c
      - |
        bash -c './scripts/docker-entrypoint.sh'
    expectedOutput: ["No context.xml was specified"]
  # Verify cmd line options to be passed for hazelcast starting in java 9+
  - name: "Check settings required for starting hazelcast in java modular environment "
    command: "bash"
    args:
      - -c
      - |
        rm -f /usr/local/tomcat/conf/Catalina/localhost/prweb.xml &&
        bash -c '/usr/local/tomcat/bin/catalina.sh run &'&&
        sleep 5s
    exitCode: 0
    expectedOutput: ["--add-modules java.se --add-exports java.base/jdk.internal.ref=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.nio=ALL-UNNAMED --add-opens java.base/sun.nio.ch=ALL-UNNAMED --add-opens java.management/sun.management=ALL-UNNAMED --add-opens jdk.management/com.ibm.lang.management.internal=ALL-UNNAMED \
                      --add-opens jdk.management/com.sun.management.internal=ALL-UNNAMED"]
  # Verify certificate in keystore      
  - name: "Certificate added in keystore check"
    envVars:
    - key: "JDBC_DRIVER_URI"
      value: "https://jdbc.postgresql.org/download/postgresql-42.2.0.jar"
    - key: "JDBC_URL"
      value: "jdbc:postgresql://localhost:5432/pegadb"
    - key: "JDBC_CLASS"
      value: "org.postgresql.Driver"
    - key: "DB_USERNAME"
      value: "postgres"
    - key: "DB_PASSWORD"
      value: "postgres"      
    command: "bash"
    args:
    - -c
    - |
        mv /tests/test-artifacts/certs/* /opt/pega/certs/ &&
        bash -c './scripts/docker-entrypoint.sh run &'&&
        sleep 15s &&
        keytool -list -keystore $JAVA_HOME/lib/security/cacerts	-alias badsslcert  -storepass changeit &&
        keytool -list -keystore $JAVA_HOME/lib/security/cacerts	-alias goodsslcert  -storepass changeit &&
        keytool -list -keystore $JAVA_HOME/lib/security/cacerts	-alias testcert  -storepass changeit
    exitCode: 0
    expectedOutput: ["badsslcert(.*)trustedCertEntry,","goodsslcert(.*)trustedCertEntry,","testcert(.*)trustedCertEntry,"]

  # Verify custom artifactory invalid certificate
  - name: "Custom artifactory invalid certificate check"
    envVars:
      - key: "JDBC_DRIVER_URI"
        value: "https://jdbc.postgresql.org/download/postgresql-42.2.0.jar"
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/web.xml /opt/pega/artifactory/cert/ &&
        bash -c './scripts/docker-entrypoint.sh run &'&&
        sleep 15s
    exitCode: 0
    expectedOutput: ["curl needs valid format certificate file for ssl verification."]

  # Verify custom artifactory invalid number of certificates
  - name: "Custom artifactory invalid number of certificates check"
    envVars:
      - key: "JDBC_DRIVER_URI"
        value: "https://jdbc.postgresql.org/download/postgresql-42.2.0.jar"
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/certs/* /opt/pega/artifactory/cert/ &&
        bash -c './scripts/docker-entrypoint.sh run &'&&
        sleep 15s
    exitCode: 0
    expectedOutput: ["Provide one certificate file. The file may contain multiple CA certificates."]

  # Verify custom artifactory certificate
  - name: "Custom artifactory certificate check"
    envVars:
      - key: "JDBC_DRIVER_URI"
        value: "https://jdbc.postgresql.org/download/postgresql-42.2.0.jar"
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/certs/goodssl.cer /opt/pega/artifactory/cert/ &&
        bash -c './scripts/docker-entrypoint.sh run &'&&
        sleep 15s
    exitCode: 0
    expectedOutput: ["Certificate is provided for custom artifactory's domain ssl verification."]

  # Tls certificate password as Environment variable
  - name: "Tls certificate Password as Environment variable"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        mv tests/test-artifacts/TOMCAT_KEYSTORE_PASSWORD /opt/pega/tomcatcertsmount/TOMCAT_KEYSTORE_PASSWORD &&
        bash -c '/scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: [ "TLS certificate password is - keystore_password_from_file" ]

  # Dockerize server xml
  - name: "Dockerize server.xml tmpl file"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "TOMCAT_KEYSTORE_DIR"
        value: "directory"
      - key: "TOMCAT_KEYSTORE_PASSWORD"
        value: "password"
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/templates/server.xml.tmpl /opt/pega/config/server.xml.tmpl &&
        bash -c './scripts/docker-entrypoint.sh' &&
        diff /usr/local/tomcat/conf/server.xml /tests/test-artifacts/templates/expected_server.xml -wB || echo "server.xml is not properly dockerized"
    exitCode: 0
    excludedOutput: ["server.xml is not properly dockerized"]

  # Stream truststore password as file input
  - name: "Stream truststore password as file input"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres_user"
      - key: "DB_PASSWORD"
        value: "postgres_pass"
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        mv tests/test-artifacts/STREAM_TRUSTSTORE_PASSWORD /opt/pega/secrets/STREAM_TRUSTSTORE_PASSWORD &&
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Stream truststore password is - stream_truststore_password_from_file"]

  # Stream keystore password as file input
  - name: "Stream keystore password as file input"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres_user"
      - key: "DB_PASSWORD"
        value: "postgres_pass"
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        mv tests/test-artifacts/STREAM_KEYSTORE_PASSWORD /opt/pega/secrets/STREAM_KEYSTORE_PASSWORD &&
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Stream keystore password is - stream_keystore_password_from_file"]

  # Stream jaas config as file input
  - name: "Stream jaas config as file input"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres_user"
      - key: "DB_PASSWORD"
        value: "postgres_pass"
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/catalina.sh /usr/local/tomcat/bin/catalina.sh &&
        mv tests/test-artifacts/STREAM_JAAS_CONFIG /opt/pega/secrets/STREAM_JAAS_CONFIG &&
        bash -c './scripts/docker-entrypoint.sh run'
    exitCode: 0
    expectedOutput: ["Stream jaas config is - stream_jaas_config username password"]

  # Verify test case for mounted catalina.properties
  - name: "Mounted catalina.properties"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/catalina.properties /opt/pega/config/catalina.properties &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: [ "Loading catalina.properties from /opt/pega/config/catalina.properties..." ]


  # Verify test case for mounted prbootstrap.properties
  - name: "Mounted prbootstrap.properties"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/prbootstrap.properties /opt/pega/config/prbootstrap.properties &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: [ "Loading prbootstrap.properties from /opt/pega/config/prbootstrap.properties..." ]


  # Verify test case for mounted java.security.overwrite
  - name: "Mounted java.security.overwrite"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/java.security.overwrite /opt/pega/config/java.security.overwrite &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: [ "Loading java.security.overwrite from /opt/pega/config/java.security.overwrite..." ]


  # Verify test case for mounted tomcat-web.xml
  - name: "Mounted tomcat-web.xml"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/tomcat-web.xml /opt/pega/config/tomcat-web.xml &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: [ "Loading tomcat web.xml from /opt/pega/config/tomcat-web.xml..." ]

  # Verify test case for mounted compressed prlog4j2.xml
  - name: "Mounted compressed prlog4j2.xml"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
      - key: "IS_PEGA_CONFIG_COMPRESSED"
        value: true
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/prlog4j2_compressed.xml /opt/pega/config/prlog4j2.xml &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: ["Loading prlog4j2 from /opt/pega/decompressedconfig/prlog4j2.xml..."]

  # Verify test case for mounted compressed prconfig.xml
  - name: "Mounted compressed prconfig.xml"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
      - key: "IS_PEGA_CONFIG_COMPRESSED"
        value: true
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/prlog4j2_compressed.xml /opt/pega/config/prconfig.xml &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: [ "Loading prconfig from /opt/pega/decompressedconfig/prconfig.xml..." ]

  # Verify test case for mounted compressed context.xml
  - name: "Mounted compressed context.xml"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
      - key: "IS_PEGA_CONFIG_COMPRESSED"
        value: true
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/prlog4j2_compressed.xml /opt/pega/config/context.xml &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: [ "Loading context.xml from /opt/pega/decompressedconfig/context.xml..." ]

  # Dockerize compressed context xml
  - name: "Decompressed context.xml"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
      - key: "IS_PEGA_CONFIG_COMPRESSED"
        value: true
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/prlog4j2_compressed.xml /opt/pega/config/context.xml &&
        bash -c './scripts/docker-entrypoint.sh' &&
        diff /usr/local/tomcat/conf/context.xml /tests/test-artifacts/context.xml || echo "context.xml is not properly decompressed"
    exitCode: 0
    excludedOutput: [ "context.xml is not properly decompressed" ]

  # Verify test case for mounted compressed server.xml
  - name: "Mounted compressed server.xml"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
      - key: "IS_PEGA_CONFIG_COMPRESSED"
        value: true
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/server_compressed.xml /opt/pega/config/server.xml &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: [ "Loading server.xml from /opt/pega/decompressedconfig/server.xml..." ]

  # Dockerize compressed server xml
  - name: "Decompressed server.xml"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
      - key: "IS_PEGA_CONFIG_COMPRESSED"
        value: true
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/server_compressed.xml /opt/pega/config/server.xml &&
        bash -c './scripts/docker-entrypoint.sh' &&
        diff /usr/local/tomcat/conf/server.xml /tests/test-artifacts/server.xml || echo "server.xml is not properly decompressed"
    exitCode: 0
    excludedOutput: [ "server.xml is not properly decompressed" ]

  # Verify test case for mounted compressed web.xml
  - name: "Mounted compressed web.xml"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
      - key: "IS_PEGA_CONFIG_COMPRESSED"
        value: true
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/web_compressed.xml /opt/pega/config/web.xml &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: [ "Loading web.xml from /opt/pega/decompressedconfig/web.xml..." ]

  # Verify test case for mounted compressed tomcat-users.xml
  - name: "Mounted compressed tomcat-users.xml"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
      - key: "IS_PEGA_CONFIG_COMPRESSED"
        value: true
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/tomcat-users_compressed.xml /opt/pega/config/tomcat-users.xml &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: [ "Loading tomcat-users.xml from /opt/pega/decompressedconfig/tomcat-users.xml..." ]

  # Dockerize compressed tomcat-users xml
  - name: "Decompressed tomcat-users.xml"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
      - key: "IS_PEGA_CONFIG_COMPRESSED"
        value: true
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/tomcat-users_compressed.xml /opt/pega/config/tomcat-users.xml &&
        bash -c './scripts/docker-entrypoint.sh' &&
        diff /usr/local/tomcat/conf/tomcat-users.xml /tests/test-artifacts/tomcat-users.xml || echo "tomcat-users.xml is not properly decompressed"
    exitCode: 0
    excludedOutput: [ "tomcat-users.xml is not properly decompressed" ]

  # Verify test case for mounted compressed catalina.properties
  - name: "Mounted compressed catalina.properties"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
      - key: "IS_PEGA_CONFIG_COMPRESSED"
        value: true
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/catalina_compressed.properties /opt/pega/config/catalina.properties &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: [ "Loading catalina.properties from /opt/pega/decompressedconfig/catalina.properties..." ]

  # Verify test case for mounted compressed prbootstrap.properties
  - name: "Mounted compressed prbootstrap.properties"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
      - key: "IS_PEGA_CONFIG_COMPRESSED"
        value: true
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/prbootstrap_compressed.properties /opt/pega/config/prbootstrap.properties &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: [ "Loading prbootstrap.properties from /opt/pega/decompressedconfig/prbootstrap.properties..." ]

  # Verify test case for mounted compressed java.security.overwrite
  - name: "Mounted compressed java.security.overwrite"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
      - key: "IS_PEGA_CONFIG_COMPRESSED"
        value: true
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/java_compressed.security.overwrite /opt/pega/config/java.security.overwrite &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: [ "Loading java.security.overwrite from /opt/pega/decompressedconfig/java.security.overwrite..." ]

  # Verify test case for mounted compressed tomcat-web.xml
  - name: "Mounted compressed tomcat-web.xml"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
      - key: "IS_PEGA_CONFIG_COMPRESSED"
        value: true
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/tomcat-web_compressed.xml /opt/pega/config/tomcat-web.xml &&
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: [ "Loading tomcat web.xml from /opt/pega/decompressedconfig/tomcat-web.xml..." ]

  # Dockerize compressed server xml tmpl
  - name: "Dockerize compressed server.xml tmpl file"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "TOMCAT_KEYSTORE_DIR"
        value: "directory"
      - key: "TOMCAT_KEYSTORE_PASSWORD"
        value: "password"
      - key: "IS_PEGA_CONFIG_COMPRESSED"
        value: true
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/templates/server_compressed.xml.tmpl /opt/pega/config/server.xml.tmpl &&
        bash -c './scripts/docker-entrypoint.sh' &&
        diff /usr/local/tomcat/conf/server.xml /tests/test-artifacts/templates/expected_server.xml -wB || echo "decompressed server.xml is not properly dockerized"
    exitCode: 0
    excludedOutput: [ "decompressed server.xml is not properly dockerized" ]

  # Dockerize compressed context.xml tmpl
  - name: "Dockerize compressed context.xml tmpl file"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
      - key: "IS_PEGA_CONFIG_COMPRESSED"
        value: true
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/templates/context_compressed.xml.tmpl /opt/pega/config/context.xml.tmpl &&
        bash -c './scripts/docker-entrypoint.sh' &&
        diff /usr/local/tomcat/conf/context.xml /tests/test-artifacts/templates/expected_context.xml || echo "decompressed context.xml is not properly dockerized"
    exitCode: 0
    excludedOutput: [ "decompressed context.xml is not properly dockerized" ]

  # Verify test case for mounted compressed context.xml.tmpl
  - name: "Mounted context.xml.tmpl with compress as false"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
      - key: "IS_PEGA_CONFIG_COMPRESSED"
        value: false
    command: "bash"
    args:
      - -c
      - |
        mv /tests/test-artifacts/templates/context.xml.tmpl /opt/pega/config/context.xml.tmpl &&
        bash -c './scripts/docker-entrypoint.sh' &&
        diff /usr/local/tomcat/conf/context.xml /tests/test-artifacts/templates/expected_context.xml || echo "context.xml is not properly dockerized when compress is false"
    exitCode: 0
    excludedOutput: ["context.xml is not properly dockerized when compress is false"]

  # Verify test case for no of decompressed files
  - name: "Decompressed files"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
      - key: "IS_PEGA_CONFIG_COMPRESSED"
        value: true
    command: "bash"
    args:
      - -c
      - |
        bash -c './scripts/docker-entrypoint.sh' &&
        if [ "$(ls /opt/pega/config | wc -l)" -ne "$(ls /opt/pega/decompressedconfig | wc -l)" ]; then echo "missing files in file_list variable"; fi
    exitCode: 0
    excludedOutput: [ "missing files in file_list variable" ]

  # Verify external custom tomcat keystore
  - name: "External Custom Tomcat Keystore files"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
      - key: "EXTERNAL_KEYSTORE_NAME"
        value: "keystore.jks"
    command: "bash"
    args:
      - -c
      - |
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: [ "External custom keystore name key found" ]

  # Verify external custom tomcat keystore password key
  - name: "External Custom Tomcat Keystore files"
    envVars:
      - key: "JDBC_URL"
        value: "jdbc:postgresql://localhost:5432/pegadb"
      - key: "JDBC_CLASS"
        value: "org.postgresql.Driver"
      - key: "DB_USERNAME"
        value: "postgres"
      - key: "DB_PASSWORD"
        value: "postgres"
      - key: "RULES_SCHEMA"
        value: "rules"
      - key: "DATA_SCHEMA"
        value: "data"
      - key: "EXTERNAL_KEYSTORE_PASSWORD"
        value: "password"
    command: "bash"
    args:
      - -c
      - |
        bash -c './scripts/docker-entrypoint.sh'
    exitCode: 0
    expectedOutput: [ "External custom keystore password key found" ]